#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define DEF 0
#define SYM 1
#define NAV 2

#define AS(keycode) &as LS(keycode) keycode

/ {
  behaviors {
    as: auto_shift {
      compatible = "zmk,behavior-hold-tap";
      label = "AUTO_SHIFT";
      #binding-cells = <2>;
      tapping_term_ms = <135>;
      quick_tap_ms = <0>;
      flavor = "tap-preferred";
      bindings = <&kp>, <&kp>;
    };
  };

  macros {
    ZMK_MACRO(screenshot,
      wait-ms = <30>;
      tap-ms = <40>;
      bindings = <&macro_press &kp LGUI &kp LSHIFT>, <&macro_tap &kp N3>, <&macro_release &kp LSHIFT &kp LGUI>;
    )
    ZMK_MACRO(capture_screen,
      wait-ms = <30>;
      tap-ms = <40>;
      bindings = <&macro_press &kp LGUI &kp LSHIFT>, <&macro_tap &kp N4>, <&macro_release &kp LSHIFT &kp LGUI>;
    )
    ZMK_MACRO(change_window,
      wait-ms = <30>;
      tap-ms = <40>;
      bindings = <&macro_press &kp LGUI>, <&macro_tap &kp GRAVE>, <&macro_release &kp LGUI>;
    )
    ZMK_MACRO(wpf,
      wait-ms = <30>;
      tap-ms = <40>;
      bindings = <&macro_press &kp LSHIFT &kp LGUI &kp LALT &kp LCTRL>, <&macro_tap &kp F>, <&macro_release &kp LSHIFT &kp LGUI &kp LALT &kp LCTRL>;
    )
    ZMK_MACRO(wpl,
      wait-ms = <30>;
      tap-ms = <40>;
      bindings = <&macro_press &kp LSHIFT &kp LGUI &kp LALT &kp LCTRL>, <&macro_tap &kp Z>, <&macro_release &kp LSHIFT &kp LGUI &kp LALT &kp LCTRL>;
    )
    ZMK_MACRO(wpr,
      wait-ms = <30>;
      tap-ms = <40>;
      bindings = <&macro_press &kp LSHIFT &kp LGUI &kp LALT &kp LCTRL>, <&macro_tap &kp X>, <&macro_release &kp LSHIFT &kp LGUI &kp LALT &kp LCTRL>;
    )
  };

  keymap {
    compatible = "zmk,keymap";

    DEF {
      bindings = <
      &kp GRAVE       &kp N1 &kp N2 &kp N3     &kp N4     &kp N5         &kp N6        &kp N7         &kp N8       &kp N9  &kp N0       &kp BSPC
      &lt NAV TAB     &kp Q  &kp W  &kp F      &kp P      &kp B          &kp J         &kp L          &kp U        &kp Y   &kp SEMI     &kp MINUS
      &mo SYM         &kp A  &kp R  &kp S      &kp T      &kp G          &kp M         &kp N          &kp E        &kp I   &kp O        &kp SQT
      &kp LSHIFT      &kp Z  &kp X  &kp C      &kp D      &kp V          &kp K         &kp H          &kp COMMA    &kp DOT &kp SLASH    &kp BSLH
                                    &kp LGUI   &kp LSHIFT &kp LCTRL      &kp ENTER     &kp SPACE      &mt LSHIFT ESC
                                               &kp LCTRL  &kp LALT       &mo NAV       &kp DEL
      >;
    };

    SYM {
      bindings = <
      &kp GRAVE     &kp EXCL &kp AT &kp HASH   &kp DLLR   &kp PRCNT        &kp CARET     &kp AMPS       &kp STAR     &kp LPAR     &kp RPAR  &kp BSPC
      &none         &none    &none  &none      &none      &none            &none         &kp LS(LBKT)   &kp LS(RBKT) &kp BSLH     &kp SEMI  &kp MINUS
      &trans        &none    &none  &none      &none      &none            &kp TILDE     &kp LBKT       &kp RBKT     &kp MINUS    &none     &kp SQT
      &trans        &none    &none  &none      &none      &none            &kp GRAVE     &kp EQUAL      &kp COMMA    &kp DOT      &none     &kp BSLH
                                   &trans      &trans     &trans           &trans        &kp SPACE      &trans
                                               &trans     &trans           &trans        &trans
      >;
    };

    NAV {
      bindings = <
      &bootloader     &none   &none         &none          &screenshot   &capture_screen   &none           &none       &none       &none       &none  &bootloader
      &trans          &none   &none         &kp C_BRI_DN   &kp C_BRI_UP  &kp C_VOL_UP      &screenshot     &none       &kp UP      &none       &none  &none
      &trans          &none   &kp C_PREV    &kp C_PP       &kp C_NEXT    &kp C_VOL_DN      &capture_screen &kp LEFT    &kp DOWN    &kp RIGHT   &none  &none
      &none           &none   &wpl          &wpf           &wpr          &kp K_MUTE        &none           &none       &none       &none       &none  &none
                                            &bt BT_CLR     &none         &none             &none           &none       &bt BT_CLR
                                                           &trans        &trans            &trans          &trans
      >;
    };
  };
};
